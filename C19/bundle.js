(function (d3, topojson) {
  'use strict';

  //SVG
  const svg = d3.select('svg');
  const svgWidth = +svg.attr('width');
  const svgHeight = +svg.attr('height');

  //world generator
  const projection = d3.geoMercator()
  	.center([0,20]);

  const pathGenerator = d3.geoPath().projection(projection);
  const worldG = svg.append('g')
  	.attr('transform', `translate(0,0)`);

  worldG.append('path')
    .attr('fill','gray')
    .attr('d', pathGenerator({type:'Sphere'}));

  const world = d3.json('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-10m.json').then(data => {
  	const countries = topojson.feature(data,data.objects.countries);	
  	const paths = worldG.selectAll('path').data(countries.features);
  	paths.enter()
      .append('path')
        .attr('d', d => pathGenerator(d))
        .attr('stroke', 'rgb(255,255,255,0.2)');
  	
    let datesArray = [];
    
    //Render Covid-19 Cases
    const covidCases = d3.csv('data.csv')
  	.then(data => {
      data.forEach(d => {
        datesArray = parseCases(d);
      });
      renderCases(data);
  	});
  });


  //Render Covid Cases function
  const renderCases = (data,date) =>{
    
    //Scales
    const yearScale = d3.scaleOrdinal();
    const radiusValue = d => d['3/25/20'];
  	const radiusScale = d3.scaleSqrt()
      .domain(d3.extent(data, radiusValue))
      .range([1,50]);
    
    worldG.append('g')
      .selectAll('circle')
      .data(data)
        .enter()
          .append('circle')
          .attr('cx', d => projection([d.Long,d.Lat])[0]) 
          .attr('cy', d => projection([d.Long,d.Lat])[1])
          .attr('r', d => radiusScale(radiusValue(d)))
          .attr('fill','orange')
    			.attr('fill-opacity', .4)
    			.attr('stroke', 'rgb(255,255,255,.4');
  };
  //first date of Covid-19 cases record by Johns Hopkins

  const dateSlider = d3.select('#date-slider')
  	.on('input', d => {
    	d3.select('#current-date').text('stuff');
    });

  const parseCases = d => {
    const keys = Object.keys(d);
    for(let i = 0; i < keys.length; i++){
      if(!isNaN(Date.parse(keys[i]))){
        d[keys[i]] = +d[keys[i]];
        keys[i] = formatDate(keys[i]);
      }	
    }
    d.Long = +d.Long;
    d.Lat = +d.Lat;
  	
  };
  //Change original date format of csv file
  const formatDate = date => {
    const parseTime = d3.timeParse('%m/%d/%y');
    const format = d3.timeFormat('%m/%d/%y');
  	let newDate = parseTime(date);
    newDate = format(newDate);
    return newDate;
  };

}(d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgXG5cdGNzdiwgXG4gIGpzb24sIFxuICBnZW9QYXRoLCBcbiAgZ2VvTWVyY2F0b3IsIFxuICBzY2FsZVNxcnQsXG4gIHNjYWxlT3JkaW5hbCxcblx0ZXh0ZW50LFxuICB6b29tLFxuICB0aW1lRm9ybWF0LFxuXHR0aW1lUGFyc2UsXG59IGZyb20gJ2QzJztcbmltcG9ydCB7IGZlYXR1cmUsIG1lc2ggfSBmcm9tICd0b3BvanNvbic7XG5cbi8vU1ZHXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuY29uc3Qgc3ZnV2lkdGggPSArc3ZnLmF0dHIoJ3dpZHRoJyk7XG5jb25zdCBzdmdIZWlnaHQgPSArc3ZnLmF0dHIoJ2hlaWdodCcpO1xuY29uc3QgbWFyZ2luID0ge3RvcDogNTAsIHJpZ2h0OjUwLCBib3R0b206NTAsIGxlZnQ6NTB9XG5jb25zdCBpbm5lcldpZHRoID0gc3ZnV2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbmNvbnN0IGlubmVySGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbi8vd29ybGQgZ2VuZXJhdG9yXG5jb25zdCBwcm9qZWN0aW9uID0gZ2VvTWVyY2F0b3IoKVxuXHQuY2VudGVyKFswLDIwXSk7XG5cbmNvbnN0IHBhdGhHZW5lcmF0b3IgPSBnZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKTtcbmNvbnN0IHdvcmxkRyA9IHN2Zy5hcHBlbmQoJ2cnKVxuXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLDApYCk7XG5cbndvcmxkRy5hcHBlbmQoJ3BhdGgnKVxuICAuYXR0cignZmlsbCcsJ2dyYXknKVxuICAuYXR0cignZCcsIHBhdGhHZW5lcmF0b3Ioe3R5cGU6J1NwaGVyZSd9KSk7XG5cbmNvbnN0IHdvcmxkID0ganNvbignaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS93b3JsZC1hdGxhc0AyL2NvdW50cmllcy0xMG0uanNvbicpLnRoZW4oZGF0YSA9PiB7XG5cdGNvbnN0IGNvdW50cmllcyA9IGZlYXR1cmUoZGF0YSxkYXRhLm9iamVjdHMuY291bnRyaWVzKTtcdFxuXHRjb25zdCBwYXRocyA9IHdvcmxkRy5zZWxlY3RBbGwoJ3BhdGgnKS5kYXRhKGNvdW50cmllcy5mZWF0dXJlcyk7XG5cdHBhdGhzLmVudGVyKClcbiAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdkJywgZCA9PiBwYXRoR2VuZXJhdG9yKGQpKVxuICAgICAgLmF0dHIoJ3N0cm9rZScsICdyZ2IoMjU1LDI1NSwyNTUsMC4yKScpO1xuXHRcbiAgbGV0IGRhdGVzQXJyYXkgPSBbXTtcbiAgXG4gIC8vUmVuZGVyIENvdmlkLTE5IENhc2VzXG4gIGNvbnN0IGNvdmlkQ2FzZXMgPSBjc3YoJ2RhdGEuY3N2Jylcblx0LnRoZW4oZGF0YSA9PiB7XG4gICAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgZGF0ZXNBcnJheSA9IHBhcnNlQ2FzZXMoZCk7XG4gICAgfSk7XG4gICAgcmVuZGVyQ2FzZXMoZGF0YSxkYXRlc0FycmF5KTtcblx0fSk7XG59KTtcblxuXG4vL1JlbmRlciBDb3ZpZCBDYXNlcyBmdW5jdGlvblxuY29uc3QgcmVuZGVyQ2FzZXMgPSAoZGF0YSxkYXRlKSA9PntcbiAgXG4gIC8vU2NhbGVzXG4gIGNvbnN0IHllYXJTY2FsZSA9IHNjYWxlT3JkaW5hbCgpXG4gIGNvbnN0IHJhZGl1c1ZhbHVlID0gZCA9PiBkWyczLzI1LzIwJ107XG5cdGNvbnN0IHJhZGl1c1NjYWxlID0gc2NhbGVTcXJ0KClcbiAgICAuZG9tYWluKGV4dGVudChkYXRhLCByYWRpdXNWYWx1ZSkpXG4gICAgLnJhbmdlKFsxLDUwXSk7XG4gIFxuICB3b3JsZEcuYXBwZW5kKCdnJylcbiAgICAuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgIC5kYXRhKGRhdGEpXG4gICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cignY3gnLCBkID0+IHByb2plY3Rpb24oW2QuTG9uZyxkLkxhdF0pWzBdKSBcbiAgICAgICAgLmF0dHIoJ2N5JywgZCA9PiBwcm9qZWN0aW9uKFtkLkxvbmcsZC5MYXRdKVsxXSlcbiAgICAgICAgLmF0dHIoJ3InLCBkID0+IHJhZGl1c1NjYWxlKHJhZGl1c1ZhbHVlKGQpKSlcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCdvcmFuZ2UnKVxuICBcdFx0XHQuYXR0cignZmlsbC1vcGFjaXR5JywgLjQpXG4gIFx0XHRcdC5hdHRyKCdzdHJva2UnLCAncmdiKDI1NSwyNTUsMjU1LC40Jyk7XG59XG4vL2ZpcnN0IGRhdGUgb2YgQ292aWQtMTkgY2FzZXMgcmVjb3JkIGJ5IEpvaG5zIEhvcGtpbnNcblxuY29uc3QgZGF0ZVNsaWRlciA9IHNlbGVjdCgnI2RhdGUtc2xpZGVyJylcblx0Lm9uKCdpbnB1dCcsIGQgPT4ge1xuICBcdHNlbGVjdCgnI2N1cnJlbnQtZGF0ZScpLnRleHQoJ3N0dWZmJyk7XG4gIH0pO1xuXG5jb25zdCBwYXJzZUNhc2VzID0gZCA9PiB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkKTtcbiAgZm9yKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspe1xuICAgIGlmKCFpc05hTihEYXRlLnBhcnNlKGtleXNbaV0pKSl7XG4gICAgICBkW2tleXNbaV1dID0gK2Rba2V5c1tpXV07XG4gICAgICBrZXlzW2ldID0gZm9ybWF0RGF0ZShrZXlzW2ldKTtcbiAgICB9XHRcbiAgfVxuICBkLkxvbmcgPSArZC5Mb25nO1xuICBkLkxhdCA9ICtkLkxhdDtcblx0XG59XG4vL0NoYW5nZSBvcmlnaW5hbCBkYXRlIGZvcm1hdCBvZiBjc3YgZmlsZVxuY29uc3QgZm9ybWF0RGF0ZSA9IGRhdGUgPT4ge1xuICBjb25zdCBwYXJzZVRpbWUgPSB0aW1lUGFyc2UoJyVtLyVkLyV5Jyk7XG4gIGNvbnN0IGZvcm1hdCA9IHRpbWVGb3JtYXQoJyVtLyVkLyV5Jyk7XG5cdGxldCBuZXdEYXRlID0gcGFyc2VUaW1lKGRhdGUpO1xuICBuZXdEYXRlID0gZm9ybWF0KG5ld0RhdGUpO1xuICByZXR1cm4gbmV3RGF0ZTtcbn1cblxuICAgICAgICAgICAiXSwibmFtZXMiOlsic2VsZWN0IiwiZ2VvTWVyY2F0b3IiLCJnZW9QYXRoIiwianNvbiIsImZlYXR1cmUiLCJjc3YiLCJzY2FsZU9yZGluYWwiLCJzY2FsZVNxcnQiLCJleHRlbnQiLCJ0aW1lUGFyc2UiLCJ0aW1lRm9ybWF0Il0sIm1hcHBpbmdzIjoiOzs7O0VBZUEsTUFBTSxHQUFHLEdBQUdBLFNBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUMxQixNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDcEMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7RUFNdEMsTUFBTSxVQUFVLEdBQUdDLGNBQVcsRUFBRTtJQUM5QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7RUFFakIsTUFBTSxhQUFhLEdBQUdDLFVBQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztFQUN2RCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUM1QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQzs7RUFFdEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDbkIsSUFBSSxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDOztFQUU3QyxNQUFNLEtBQUssR0FBR0MsT0FBSSxDQUFDLCtEQUErRCxDQUFDLENBQUMsSUFBSSxDQUFD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