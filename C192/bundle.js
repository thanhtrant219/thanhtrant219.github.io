(function (React, ReactDOM, d3) {
  'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  //import TileLayer from 'ol/layer/Tile'; 
  //import Stamen from 'ol/source/Stamen'; 
  const TileLayer = ol.layer.Tile;
  const Stamen = ol.source.Stamen;

  const Basemap = new TileLayer({ 
    className: 'basemap',        
    source: new Stamen({         
      layer: 'toner-lite'        
    })
  });

  // Generates a circle sprite for the given color.
  // Inspired by https://takahirox.github.io/three.js/examples/canvas_particles_sprites.html
  const generateSprite = (spriteColor, opacity = 0.4) => {
    const canvas = document.createElement('canvas');
    const side = Math.pow(2, 6);
    const center = side / 2;
    const fullRadius = side / 2 - 4;
    canvas.width = side;
    canvas.height = side;

    const context = canvas.getContext('2d');

    //// Inner circle.
    //const center = side / 2;
    //const radius = fullRadius * innerRadius;
    //context.arc(center, center, radius, 0, Math.PI * 2);
    //context.fillStyle = spriteColor;
    //context.globalAlpha = 1;
    //context.fill();

    //// Outer circle.
    //context.arc(center, center, fullRadius, 0, Math.PI * 2);
    //context.globalAlpha = 0.1;
    //context.fill();

    // Firefly cartography.
    const hue = d3.cubehelix(spriteColor).h;
    const r0 = 0;
    const r1 = fullRadius;
    const gradient = context.createRadialGradient(
      center,
      center,
      r0,
      center,
      center,
      r1
    );
    const glowColor = d3.cubehelix(hue, 2, 0.8, 0.2);
    gradient.addColorStop(0, 'white');
    const pinpointLightRadius = 0.02;
    gradient.addColorStop(pinpointLightRadius, 'white');

    const n = 10;
    for (let i = 1; i < n; i++) {
      const p = i / (n - 1);
      const x = p * 3;
      glowColor.opacity =
        (((1 / Math.sqrt(2 * Math.PI)) * Math.pow(Math.E, -(x * x) / 2)) /
          0.3989422804014327 -
          0.01110899653824231) *
        opacity;
      gradient.addColorStop(
        pinpointLightRadius + p * (1 - pinpointLightRadius),
        glowColor
      );
    }
    context.fillStyle = gradient;
    context.fillRect(0, 0, side, side);

    return canvas;
  };

  const { Map, View, source, layer, format, style } = ol;
  const VectorLayer = layer.Vector;
  const VectorSource = source.Vector;
  const GeoJSON = format.GeoJSON;
  const { Icon, Style } = style;

  const iconStyle = (canvas, scale) => {
    const { width, height } = canvas;
    return new Style({
      image: new Icon({
        img: canvas,
        imgSize: [width, height],
        scale
      })
    });
  };

  const mapZoom = {
    zoom: 1.9068905956085187,
    center: [831533.7387061372, 1156963.888662201]
  };

  const useMapAndView = ({ ref }) => {
    const [mapAndView, setMapAndView] = React.useState();

    React.useEffect(() => {
      const { zoom, center } = mapZoom;

      const view = new View({ center, zoom });
      const map = new Map({
        target: ref.current,
        layers: [Basemap],
        view
      });

      setMapAndView({ map, view });
      // Free up map resources when destroying the component.
      // Draws from https://stackoverflow.com/questions/25995334/deconstructing-an-open-layers-3-map
      return () => {
        map.setTarget(null);
      };
    }, []);
    return mapAndView;
  };

  const useSpriteLayer = ({ mapAndView, data }) => {
    React.useEffect(() => {
      if (!mapAndView || !data) return;
      const { map } = mapAndView;
      const source = new VectorSource({});

      const geoJSON = {
        type: 'FeatureCollection',
        features: data.map(d => ({
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: [d.lng, d.lat]
          }
        }))
      };
      source.addFeatures(
        new GeoJSON().readFeatures(geoJSON, { featureProjection: 'EPSG:3857' })
      );
      const canvas = generateSprite('rgb(0,200,150)', 0.4);
      const style = iconStyle(canvas, 0.6);
      const layer = new VectorLayer({ source, style });
      map.addLayer(layer);
      return () => map.removeLayer(layer);
    }, [mapAndView, data]);
  };

  const Cartography = ({ data }) => {
    const ref = React.useRef(null);
    const mapAndView = useMapAndView({ ref });
    useSpriteLayer({ mapAndView, data });
    return React__default.createElement( 'div', { style: { flex: 1 }, ref: ref });
  };

  const csvUrl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/e1c41f13e907e3828fb40cb542148b6430426199/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv';

  const row = d => {
    d.lat = +d.Lat;
    d.lng = +d.Long;
    return d;
  };

  const useData = () => {
    const [data, setData] = React.useState(null);

    React.useEffect(() => {
      d3.csv(csvUrl, row).then(rawData => {
        const columns = rawData.columns;
        const mostRecentDate = columns[columns.length - 1];
        console.log('Showing data for ' + mostRecentDate);
        setData(rawData.filter(d => d[mostRecentDate] !== "0"));
      });
    }, []);

    return data;
  };

  const App = () => {
    const data = useData();
    return React__default.createElement( Cartography, { data: data })
  };

  ReactDOM.render(React__default.createElement( App, null ), document.getElementById('root'));

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,